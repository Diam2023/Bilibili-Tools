/**
 *
 *  LiveSubscribe.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "LiveSubscribe.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::bilibili_database;

const std::string LiveSubscribe::Cols::_id = "id";
const std::string LiveSubscribe::Cols::_notify_target = "notify_target";
const std::string LiveSubscribe::Cols::_target_type = "target_type";
const std::string LiveSubscribe::Cols::_subscribe_target = "subscribe_target";
const std::string LiveSubscribe::Cols::_check_timer = "check_timer";
const std::string LiveSubscribe::primaryKeyName = "id";
const bool LiveSubscribe::hasPrimaryKey = true;
const std::string LiveSubscribe::tableName = "live_subscribe";

const std::vector<typename LiveSubscribe::MetaData> LiveSubscribe::metaData_={
{"id","uint32_t","int unsigned",4,1,1,1},
{"notify_target","std::string","varchar(20)",20,0,0,1},
{"target_type","std::string","enum('PRIVATE','GROUP')",0,0,0,1},
{"subscribe_target","std::string","varchar(20)",20,0,0,1},
{"check_timer","uint32_t","int unsigned",4,0,0,1}
};
const std::string &LiveSubscribe::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
LiveSubscribe::LiveSubscribe(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint32_t>(r["id"].as<uint32_t>());
        }
        if(!r["notify_target"].isNull())
        {
            notifyTarget_=std::make_shared<std::string>(r["notify_target"].as<std::string>());
        }
        if(!r["target_type"].isNull())
        {
            targetType_=std::make_shared<std::string>(r["target_type"].as<std::string>());
        }
        if(!r["subscribe_target"].isNull())
        {
            subscribeTarget_=std::make_shared<std::string>(r["subscribe_target"].as<std::string>());
        }
        if(!r["check_timer"].isNull())
        {
            checkTimer_=std::make_shared<uint32_t>(r["check_timer"].as<uint32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            notifyTarget_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            targetType_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            subscribeTarget_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            checkTimer_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
    }

}

LiveSubscribe::LiveSubscribe(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            notifyTarget_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            targetType_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            subscribeTarget_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            checkTimer_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
}

LiveSubscribe::LiveSubscribe(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("notify_target"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["notify_target"].isNull())
        {
            notifyTarget_=std::make_shared<std::string>(pJson["notify_target"].asString());
        }
    }
    if(pJson.isMember("target_type"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["target_type"].isNull())
        {
            targetType_=std::make_shared<std::string>(pJson["target_type"].asString());
        }
    }
    if(pJson.isMember("subscribe_target"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["subscribe_target"].isNull())
        {
            subscribeTarget_=std::make_shared<std::string>(pJson["subscribe_target"].asString());
        }
    }
    if(pJson.isMember("check_timer"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["check_timer"].isNull())
        {
            checkTimer_=std::make_shared<uint32_t>((uint32_t)pJson["check_timer"].asUInt64());
        }
    }
}

void LiveSubscribe::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            notifyTarget_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            targetType_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            subscribeTarget_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            checkTimer_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
}

void LiveSubscribe::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("notify_target"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["notify_target"].isNull())
        {
            notifyTarget_=std::make_shared<std::string>(pJson["notify_target"].asString());
        }
    }
    if(pJson.isMember("target_type"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["target_type"].isNull())
        {
            targetType_=std::make_shared<std::string>(pJson["target_type"].asString());
        }
    }
    if(pJson.isMember("subscribe_target"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["subscribe_target"].isNull())
        {
            subscribeTarget_=std::make_shared<std::string>(pJson["subscribe_target"].asString());
        }
    }
    if(pJson.isMember("check_timer"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["check_timer"].isNull())
        {
            checkTimer_=std::make_shared<uint32_t>((uint32_t)pJson["check_timer"].asUInt64());
        }
    }
}

const uint32_t &LiveSubscribe::getValueOfId() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &LiveSubscribe::getId() const noexcept
{
    return id_;
}
void LiveSubscribe::setId(const uint32_t &pId) noexcept
{
    id_ = std::make_shared<uint32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename LiveSubscribe::PrimaryKeyType & LiveSubscribe::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &LiveSubscribe::getValueOfNotifyTarget() const noexcept
{
    static const std::string defaultValue = std::string();
    if(notifyTarget_)
        return *notifyTarget_;
    return defaultValue;
}
const std::shared_ptr<std::string> &LiveSubscribe::getNotifyTarget() const noexcept
{
    return notifyTarget_;
}
void LiveSubscribe::setNotifyTarget(const std::string &pNotifyTarget) noexcept
{
    notifyTarget_ = std::make_shared<std::string>(pNotifyTarget);
    dirtyFlag_[1] = true;
}
void LiveSubscribe::setNotifyTarget(std::string &&pNotifyTarget) noexcept
{
    notifyTarget_ = std::make_shared<std::string>(std::move(pNotifyTarget));
    dirtyFlag_[1] = true;
}

const std::string &LiveSubscribe::getValueOfTargetType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(targetType_)
        return *targetType_;
    return defaultValue;
}
const std::shared_ptr<std::string> &LiveSubscribe::getTargetType() const noexcept
{
    return targetType_;
}
void LiveSubscribe::setTargetType(const std::string &pTargetType) noexcept
{
    targetType_ = std::make_shared<std::string>(pTargetType);
    dirtyFlag_[2] = true;
}
void LiveSubscribe::setTargetType(std::string &&pTargetType) noexcept
{
    targetType_ = std::make_shared<std::string>(std::move(pTargetType));
    dirtyFlag_[2] = true;
}

const std::string &LiveSubscribe::getValueOfSubscribeTarget() const noexcept
{
    static const std::string defaultValue = std::string();
    if(subscribeTarget_)
        return *subscribeTarget_;
    return defaultValue;
}
const std::shared_ptr<std::string> &LiveSubscribe::getSubscribeTarget() const noexcept
{
    return subscribeTarget_;
}
void LiveSubscribe::setSubscribeTarget(const std::string &pSubscribeTarget) noexcept
{
    subscribeTarget_ = std::make_shared<std::string>(pSubscribeTarget);
    dirtyFlag_[3] = true;
}
void LiveSubscribe::setSubscribeTarget(std::string &&pSubscribeTarget) noexcept
{
    subscribeTarget_ = std::make_shared<std::string>(std::move(pSubscribeTarget));
    dirtyFlag_[3] = true;
}

const uint32_t &LiveSubscribe::getValueOfCheckTimer() const noexcept
{
    static const uint32_t defaultValue = uint32_t();
    if(checkTimer_)
        return *checkTimer_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &LiveSubscribe::getCheckTimer() const noexcept
{
    return checkTimer_;
}
void LiveSubscribe::setCheckTimer(const uint32_t &pCheckTimer) noexcept
{
    checkTimer_ = std::make_shared<uint32_t>(pCheckTimer);
    dirtyFlag_[4] = true;
}

void LiveSubscribe::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &LiveSubscribe::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "notify_target",
        "target_type",
        "subscribe_target",
        "check_timer"
    };
    return inCols;
}

void LiveSubscribe::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getNotifyTarget())
        {
            binder << getValueOfNotifyTarget();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTargetType())
        {
            binder << getValueOfTargetType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSubscribeTarget())
        {
            binder << getValueOfSubscribeTarget();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCheckTimer())
        {
            binder << getValueOfCheckTimer();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> LiveSubscribe::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void LiveSubscribe::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getNotifyTarget())
        {
            binder << getValueOfNotifyTarget();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTargetType())
        {
            binder << getValueOfTargetType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSubscribeTarget())
        {
            binder << getValueOfSubscribeTarget();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCheckTimer())
        {
            binder << getValueOfCheckTimer();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value LiveSubscribe::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getNotifyTarget())
    {
        ret["notify_target"]=getValueOfNotifyTarget();
    }
    else
    {
        ret["notify_target"]=Json::Value();
    }
    if(getTargetType())
    {
        ret["target_type"]=getValueOfTargetType();
    }
    else
    {
        ret["target_type"]=Json::Value();
    }
    if(getSubscribeTarget())
    {
        ret["subscribe_target"]=getValueOfSubscribeTarget();
    }
    else
    {
        ret["subscribe_target"]=Json::Value();
    }
    if(getCheckTimer())
    {
        ret["check_timer"]=getValueOfCheckTimer();
    }
    else
    {
        ret["check_timer"]=Json::Value();
    }
    return ret;
}

Json::Value LiveSubscribe::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getNotifyTarget())
            {
                ret[pMasqueradingVector[1]]=getValueOfNotifyTarget();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTargetType())
            {
                ret[pMasqueradingVector[2]]=getValueOfTargetType();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSubscribeTarget())
            {
                ret[pMasqueradingVector[3]]=getValueOfSubscribeTarget();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getCheckTimer())
            {
                ret[pMasqueradingVector[4]]=getValueOfCheckTimer();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getNotifyTarget())
    {
        ret["notify_target"]=getValueOfNotifyTarget();
    }
    else
    {
        ret["notify_target"]=Json::Value();
    }
    if(getTargetType())
    {
        ret["target_type"]=getValueOfTargetType();
    }
    else
    {
        ret["target_type"]=Json::Value();
    }
    if(getSubscribeTarget())
    {
        ret["subscribe_target"]=getValueOfSubscribeTarget();
    }
    else
    {
        ret["subscribe_target"]=Json::Value();
    }
    if(getCheckTimer())
    {
        ret["check_timer"]=getValueOfCheckTimer();
    }
    else
    {
        ret["check_timer"]=Json::Value();
    }
    return ret;
}

bool LiveSubscribe::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("notify_target"))
    {
        if(!validJsonOfField(1, "notify_target", pJson["notify_target"], err, true))
            return false;
    }
    else
    {
        err="The notify_target column cannot be null";
        return false;
    }
    if(pJson.isMember("target_type"))
    {
        if(!validJsonOfField(2, "target_type", pJson["target_type"], err, true))
            return false;
    }
    if(pJson.isMember("subscribe_target"))
    {
        if(!validJsonOfField(3, "subscribe_target", pJson["subscribe_target"], err, true))
            return false;
    }
    else
    {
        err="The subscribe_target column cannot be null";
        return false;
    }
    if(pJson.isMember("check_timer"))
    {
        if(!validJsonOfField(4, "check_timer", pJson["check_timer"], err, true))
            return false;
    }
    return true;
}
bool LiveSubscribe::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool LiveSubscribe::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("notify_target"))
    {
        if(!validJsonOfField(1, "notify_target", pJson["notify_target"], err, false))
            return false;
    }
    if(pJson.isMember("target_type"))
    {
        if(!validJsonOfField(2, "target_type", pJson["target_type"], err, false))
            return false;
    }
    if(pJson.isMember("subscribe_target"))
    {
        if(!validJsonOfField(3, "subscribe_target", pJson["subscribe_target"], err, false))
            return false;
    }
    if(pJson.isMember("check_timer"))
    {
        if(!validJsonOfField(4, "check_timer", pJson["check_timer"], err, false))
            return false;
    }
    return true;
}
bool LiveSubscribe::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool LiveSubscribe::validJsonOfField(size_t index,
                                     const std::string &fieldName,
                                     const Json::Value &pJson,
                                     std::string &err,
                                     bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
